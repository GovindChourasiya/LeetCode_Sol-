/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[] nodesBetweenCriticalPoints(ListNode head) {
        ListNode curr = head;
        List<Integer> list = new ArrayList<>();
        while (curr != null) {
            list.add(curr.val);
            curr = curr.next;
        }
        int n = list.size();
        if (n < 3) {
            return new int[]{-1, -1};
        }
        int mini = Integer.MAX_VALUE;
        int maxi = Integer.MIN_VALUE;

        List<Integer> list2 = new ArrayList<>();

        for (int i = 1; i < n - 1; i++) {
            if (list.get(i) < list.get(i - 1) && list.get(i) < list.get(i + 1)) {
                list2.add(i + 1);
            } else if (list.get(i) > list.get(i - 1) && list.get(i) > list.get(i + 1)) {
                list2.add(i + 1);
            }
        }

        if (list2.size() < 2) {
            return new int[]{-1, -1};
        }

        for (int i = 1; i < list2.size(); i++) {
            int diff = list2.get(i) - list2.get(i - 1);
            mini = Math.min(mini, diff);
        }
        maxi = list2.get(list2.size() - 1) - list2.get(0);

        return new int[]{mini, maxi};
    }
}



// /**
//  * Definition for singly-linked list.
//  * public class ListNode {
//  *     int val;
//  *     ListNode next;
//  *     ListNode() {}
//  *     ListNode(int val) { this.val = val; }
//  *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
//  * }
//  */
// class Solution {
//     public int[] nodesBetweenCriticalPoints(ListNode head) {
//         if (head == null || head.next == null || head.next.next == null) {
//             return new int[]{-1, -1};
//         }

//         ListNode prev = head;
//         ListNode curr = head.next;
//         int index = 1;
//         List<Integer> criticalPoints = new ArrayList<>();

//         while (curr.next != null) {
//             if ((curr.val > prev.val && curr.val > curr.next.val) ||
//                 (curr.val < prev.val && curr.val < curr.next.val)) {
//                 criticalPoints.add(index);
//             }
//             prev = curr;
//             curr = curr.next;
//             index++;
//         }

//         if (criticalPoints.size() < 2) {
//             return new int[]{-1, -1};
//         }

//         int minDistance = Integer.MAX_VALUE;
//         int maxDistance = criticalPoints.get(criticalPoints.size() - 1) - criticalPoints.get(0);

//         for (int i = 1; i < criticalPoints.size(); i++) {
//             int distance = criticalPoints.get(i) - criticalPoints.get(i - 1);
//             minDistance = Math.min(minDistance, distance);
//         }

//         return new int[]{minDistance, maxDistance};
//     }
// }
