class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
        int n = bloomDay.length;
        if((long)n < (long)m*k){
            return -1;
        }
        int maxE = Integer.MIN_VALUE;
        int minE = Integer.MAX_VALUE;
        for(int i=0;i<bloomDay.length;i++){
            maxE = Math.max(maxE,bloomDay[i]);
            minE = Math.min(minE,bloomDay[i]);
        }

        int left = minE;
        int right = maxE;
        int result = 0;
        while(left <= right){
            int mid = left + (right-left)/2;

            if(isPossible(bloomDay,mid,m,k)){
                result = mid;
                right = mid-1;
            } else{
                left = mid+1;
            }
        }
        return result;
    }
public boolean isPossible(int[] arr,int mid,int m,int k){
            int sum = 0;
            int count = 0;
            for(int i=0;i<arr.length;i++){
                if(arr[i] <= mid){
                    count++;
                   
                } else{
                    sum += (count/k);
                    count=0;
                }
            }
            sum += count/k;
            if(sum >= m){
                return true;
            } else{
                return false;
            }
        }
}
