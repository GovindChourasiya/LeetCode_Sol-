class GfG {
    Node LowestCommonAncesstor(Node root, int a ,int b){
        if(root==null || root.data==a || root.data==b){
            return root;
        }
        Node leftlca=LowestCommonAncesstor(root.left,a,b);
        Node rightlca=LowestCommonAncesstor(root.right,a,b);
        if(leftlca==null){
            return rightlca;
        }
        if(rightlca==null){
            return leftlca;
        }
        return root;
    }
    int Dist(Node root,int n){
        if(root==null){
            return -1;
        }
        if(root.data==n){
            return 0;
        }
        int leftDist=Dist(root.left,n);
        int rightDist=Dist(root.right,n);
        if(leftDist==-1 && rightDist==-1){
            return -1;
        }else if(leftDist==-1){
            return rightDist+1;
        }else{
            return leftDist+1;
        }
    }
    int findDist(Node root, int a, int b) {
        
        Node lca=LowestCommonAncesstor(root,a,b);
        
        int Dist1=Dist(lca,a);
        
        int Dist2=Dist(lca,b);
        return Dist1+Dist2;
    }
}
