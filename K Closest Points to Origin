class Solution {
    static class Point implements Comparable<Point> {
        int x;
        int y;
        int dist;

        public Point(int x, int y, int dist) {
            this.x = x;
            this.y = y;
            this.dist = dist;
        }

        @Override
        public int compareTo(Point p2) {
            return this.dist - p2.dist;
        }
    }

    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<Point> maxHeap = new PriorityQueue<>((a, b) -> b.compareTo(a));

        for (int[] point : points) {
            int x = point[0];
            int y = point[1];
            int dist = x * x + y * y; 
            Point p = new Point(x, y, dist);

            if (maxHeap.size() < k) {
                maxHeap.offer(p);
            } else if (p.dist < maxHeap.peek().dist) {
                maxHeap.poll();
                maxHeap.offer(p);
            }
        }

        int[][] result = new int[k][2];
        for (int i = 0; i < k; i++) {
            Point p = maxHeap.poll();
            result[i][0] = p.x;
            result[i][1] = p.y;
        }

        return result;
    }
}
