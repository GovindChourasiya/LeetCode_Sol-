class Solution {
    private int solve(int m, int n, int i, int j, int[][] matrix, int[][] dp){
        if(i >= m || j >= n){
            return 0;
        }
        if(matrix[i][j] == 0){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int right = solve(m,n,i,j+1,matrix,dp);
        int diag = solve(m,n,i+1,j+1,matrix,dp);
        int down = solve(m,n,i+1,j,matrix,dp);

        dp[i][j] = 1+Math.min(right,Math.min(diag,down));
        return (dp[i][j]);
    }
    public int countSquares(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        int result = 0;
        int[][] dp = new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                dp[i][j] = -1;
            }
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(matrix[i][j] == 1){
                    result += solve(m,n,i,j,matrix,dp);
                }
            }
        }
        return result;
    }
}
