class Solution {
    public void markGuarded(int row, int col, int[][] grid){
        int m = grid.length;
        int n = grid[0].length;
        // Checking for up
        for(int i=row-1;i>=0;i--){
            if(grid[i][col] == 2 || grid[i][col] == 3){
                break;
            }
            grid[i][col] = 1;
        }

        // Checking for down
        for(int i=row+1;i<m;i++){
            if(grid[i][col] == 2 || grid[i][col] == 3){
                break;
            }
            grid[i][col] = 1;
        }

        // Checking for left
        for(int i=col-1;i>=0;i--){
            if(grid[row][i] == 2 || grid[row][i] == 3){
                break;
            }
            grid[row][i] = 1;
        }

        // Checking for right
        for(int i=col+1;i<n;i++){
            if(grid[row][i] == 2 || grid[row][i] == 3){
                break;
            }
            grid[row][i] = 1;
        }
    }
    public int countUnguarded(int m, int n, int[][] guards, int[][] walls) {
        int[][] grid = new int[m][n];
        for(int[] arr : grid){
            Arrays.fill(arr,0);
        }
        for(int[] arr : guards){
            int i = arr[0];
            int j = arr[1];
            grid[i][j] = 2; // Markings for guards
        }

        for(int[] arr : walls){
            int i = arr[0];
            int j = arr[1];
            grid[i][j] = 3; // Markings for walls
        }

        for(int arr[] : guards){
            int i = arr[0];
            int j = arr[1];

            markGuarded(i,j,grid);
        }

        int res = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] == 0){
                    res++;
                }
            }
        }
    return res;
    }
}
