class Solution {
    public int countWays(String s, int idx, int[] dp){
        if(idx == s.length()){
            return 1;
        }
        if(s.charAt(idx) == '0'){
            return 0; // according to the problem statement
        }
        if(dp[idx] != -1) return dp[idx];
        int count = countWays(s,idx+1,dp);
        if(idx+1 < s.length()){
            int firstDigit = s.charAt(idx)-'0';
            int secondDigit = s.charAt(idx+1)-'0';
            int num = 10*firstDigit + secondDigit;
            if(num >= 10 && num <= 26){
                count += countWays(s,idx+2,dp);
            }
        }
        return dp[idx] = count;
    }
    public int numDecodings(String s) {
        if(s == null || s.isEmpty()){
            return 0;
        }
        int[] dp = new int[s.length()];
        Arrays.fill(dp,-1);
        return countWays(s,0,dp);
    }
}
