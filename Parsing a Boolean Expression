class Solution {
    public char solveExp(ArrayList<Character> list, char operator){
        if(operator == '!'){
            return (list.get(0) == 't') ? 'f' : 't';
        }
        if(operator == '&'){
            for(int i=0;i<list.size();i++){
                if(list.get(i) == 'f'){
                    return 'f';
                }
            }
            return 't';
        } 
        if(operator == '|'){
            for(int i=0;i<list.size();i++){
                if(list.get(i) == 't'){
                    return 't';
                }
            }
            return 'f';
        } 

        return 't';
    }
    public boolean parseBoolExpr(String expression) {
        int n = expression.length();

        Stack<Character> st = new Stack<>();

        for(int i=0;i<n;i++){
            char c = expression.charAt(i);
            if(c == ','){
                continue;
            } 
            if(c == ')'){
                ArrayList<Character> list = new ArrayList<>();

                while(st.peek() != '(' ){
                    list.add(st.pop());
                }
                st.pop();

                char operator = st.pop();

                st.push(solveExp(list,operator));

            } else{
                st.push(c);
            }
        }

        return (st.peek() == 't') ? true : false;
    }
}
